// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LogoutUsecase is an autogenerated mock type for the LogoutUsecase type
type LogoutUsecase struct {
	mock.Mock
}

// DeleteFromCookieSession provides a mock function with given fields: c, key
func (_m *LogoutUsecase) DeleteFromCookieSession(c context.Context, key string) error {
	ret := _m.Called(c, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSession provides a mock function with given fields: c, key, value
func (_m *LogoutUsecase) SetSession(c context.Context, key string, value interface{}) error {
	ret := _m.Called(c, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(c, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLogoutUsecase creates a new instance of LogoutUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoutUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoutUsecase {
	mock := &LogoutUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

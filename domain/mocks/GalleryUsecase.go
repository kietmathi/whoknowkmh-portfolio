// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kietmathi/whoknowkmh-portfolio/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GalleryUsecase is an autogenerated mock type for the GalleryUsecase type
type GalleryUsecase struct {
	mock.Mock
}

// FindAllAvailablePhoto provides a mock function with given fields:
func (_m *GalleryUsecase) FindAllAvailablePhoto() ([]domain.Photo, error) {
	ret := _m.Called()

	var r0 []domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Photo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Photo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNextAndPrevPhotoID provides a mock function with given fields: _a0
func (_m *GalleryUsecase) FindNextAndPrevPhotoID(_a0 string) (string, string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindPhotoByID provides a mock function with given fields: _a0
func (_m *GalleryUsecase) FindPhotoByID(_a0 uint) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderTemplate provides a mock function with given fields: c, statusCode, name, cacheDuration, data
func (_m *GalleryUsecase) RenderTemplate(c context.Context, statusCode int, name string, cacheDuration time.Duration, data interface{}) {
	_m.Called(c, statusCode, name, cacheDuration, data)
}

// NewGalleryUsecase creates a new instance of GalleryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGalleryUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GalleryUsecase {
	mock := &GalleryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

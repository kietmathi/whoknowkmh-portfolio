// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kietmathi/whoknowkmh-portfolio/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AdminUsecase is an autogenerated mock type for the AdminUsecase type
type AdminUsecase struct {
	mock.Mock
}

// FindAvailableDBTable provides a mock function with given fields:
func (_m *AdminUsecase) FindAvailableDBTable() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InsertPhoto provides a mock function with given fields: _a0
func (_m *AdminUsecase) InsertPhoto(_a0 domain.Photo) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Photo) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Photo) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(domain.Photo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderTemplate provides a mock function with given fields: c, statusCode, name, cacheDuration, data
func (_m *AdminUsecase) RenderTemplate(c context.Context, statusCode int, name string, cacheDuration time.Duration, data interface{}) {
	_m.Called(c, statusCode, name, cacheDuration, data)
}

// ShowAllPhoto provides a mock function with given fields:
func (_m *AdminUsecase) ShowAllPhoto() ([]domain.Photo, error) {
	ret := _m.Called()

	var r0 []domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Photo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Photo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhotoByID provides a mock function with given fields: _a0
func (_m *AdminUsecase) UpdatePhotoByID(_a0 domain.Photo) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Photo) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Photo) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(domain.Photo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminUsecase creates a new instance of AdminUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminUsecase {
	mock := &AdminUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

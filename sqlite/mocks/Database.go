// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	sqlite "github.com/kietmathi/whoknowkmh-portfolio/sqlite"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AutoMigrate provides a mock function with given fields: dst
func (_m *Database) AutoMigrate(dst ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dst...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *Database) Create(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Database) Delete(_a0 interface{}, _a1 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *Database) Find(_a0 interface{}, _a1 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: _a0, _a1
func (_m *Database) First(_a0 interface{}, _a1 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Model provides a mock function with given fields: value
func (_m *Database) Model(value interface{}) sqlite.Database {
	ret := _m.Called(value)

	var r0 sqlite.Database
	if rf, ok := ret.Get(0).(func(interface{}) sqlite.Database); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlite.Database)
		}
	}

	return r0
}

// Order provides a mock function with given fields: value, reorder
func (_m *Database) Order(value interface{}, reorder ...bool) sqlite.Database {
	_va := make([]interface{}, len(reorder))
	for _i := range reorder {
		_va[_i] = reorder[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 sqlite.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...bool) sqlite.Database); ok {
		r0 = rf(value, reorder...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlite.Database)
		}
	}

	return r0
}

// Pluck provides a mock function with given fields: column, value
func (_m *Database) Pluck(column string, value interface{}) error {
	ret := _m.Called(column, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(column, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *Database) Save(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: query, args
func (_m *Database) Select(query interface{}, args ...interface{}) sqlite.Database {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sqlite.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) sqlite.Database); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlite.Database)
		}
	}

	return r0
}

// Updates provides a mock function with given fields: updates
func (_m *Database) Updates(updates interface{}) error {
	ret := _m.Called(updates)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Where provides a mock function with given fields: condition, args
func (_m *Database) Where(condition interface{}, args ...interface{}) sqlite.Database {
	var _ca []interface{}
	_ca = append(_ca, condition)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sqlite.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) sqlite.Database); ok {
		r0 = rf(condition, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlite.Database)
		}
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

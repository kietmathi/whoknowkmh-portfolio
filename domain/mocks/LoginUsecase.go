// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kietmathi/whoknowkmh-portfolio/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LoginUsecase is an autogenerated mock type for the LoginUsecase type
type LoginUsecase struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: user, secret, expiry
func (_m *LoginUsecase) CreateAccessToken(user *domain.LoginUser, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.LoginUser, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.LoginUser, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.LoginUser, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFromSession provides a mock function with given fields: c, key
func (_m *LoginUsecase) DeleteFromSession(c context.Context, key string) error {
	ret := _m.Called(c, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: c, key
func (_m *LoginUsecase) GetSession(c context.Context, key string) (interface{}, error) {
	ret := _m.Called(c, key)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(c, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(c, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderTemplate provides a mock function with given fields: c, statusCode, name, cacheDuration, data
func (_m *LoginUsecase) RenderTemplate(c context.Context, statusCode int, name string, cacheDuration time.Duration, data interface{}) {
	_m.Called(c, statusCode, name, cacheDuration, data)
}

// SetCookieSession provides a mock function with given fields: c, key, value, maxAge
func (_m *LoginUsecase) SetCookieSession(c context.Context, key string, value string, maxAge int) error {
	ret := _m.Called(c, key, value, maxAge)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(c, key, value, maxAge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSession provides a mock function with given fields: c, key, value
func (_m *LoginUsecase) SetSession(c context.Context, key string, value interface{}) error {
	ret := _m.Called(c, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(c, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoginUsecase creates a new instance of LoginUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginUsecase {
	mock := &LoginUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

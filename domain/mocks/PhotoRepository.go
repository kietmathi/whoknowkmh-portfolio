// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/kietmathi/whoknowkmh-portfolio/domain"
	mock "github.com/stretchr/testify/mock"
)

// PhotoRepository is an autogenerated mock type for the PhotoRepository type
type PhotoRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *PhotoRepository) FindAll() ([]domain.Photo, error) {
	ret := _m.Called()

	var r0 []domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Photo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Photo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllAvailable provides a mock function with given fields:
func (_m *PhotoRepository) FindAllAvailable() ([]domain.Photo, error) {
	ret := _m.Called()

	var r0 []domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Photo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Photo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: _a0
func (_m *PhotoRepository) FindByID(_a0 uint) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAvailableID provides a mock function with given fields:
func (_m *PhotoRepository) GetAllAvailableID() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPhoto provides a mock function with given fields: _a0
func (_m *PhotoRepository) InsertPhoto(_a0 domain.Photo) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Photo) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Photo) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(domain.Photo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableName provides a mock function with given fields:
func (_m *PhotoRepository) TableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateByID provides a mock function with given fields: _a0
func (_m *PhotoRepository) UpdateByID(_a0 domain.Photo) (domain.Photo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Photo) (domain.Photo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Photo) domain.Photo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Photo)
	}

	if rf, ok := ret.Get(1).(func(domain.Photo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPhotoRepository creates a new instance of PhotoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhotoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhotoRepository {
	mock := &PhotoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
